(()=>{"use strict";var t=[0,1],n=t[0],r=t[1],e=[0,1],o=e[0],i=e[1];const u=function(t,n){return[t[o]-n[o],t[i]-n[i]]},c=function(t){var n=t[0],r=t[1];return n*n+r*r},a=function(t,n){return c(u(t,n))};var f=[0,1],l=f[0],s=f[1];const p=function(t){return Math.sqrt(c(t))};var d=[0,1],v=d[0],g=d[1];const h=function(t){return[t[v]/p(t),t[g]/p(t)]};var y=[0,1],m=y[0],b=y[1];const E=function(t){return Math.atan2(h(t)[b],h(t)[m])},O=function(t,n){return(t%n+n)%n};var M=[0,1],N=M[0],I=M[1];const C={fromComponents:function(t,n){return[t,n]},new:function(t,n){return[t,n]},fromDegreesAndMagnitude:function(t,n){var r=2*Math.PI/360*t;return[Math.cos(r)*n,Math.sin(r)*n]},add:function(t,e){return[t[n]+e[n],t[r]+e[r]]},subtract:u,scale:function(t){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];var e=n.reduce((function(t,n){return t*n}));return[t[N]*e,t[I]*e]},degrees:function(t){var n=E(t);return O(360*n/2/Math.PI,360)},radians:E,normalize:h,magnitude:p,squaredMagnitude:c,distanceSquared:a,distance:function(t,n){return Math.sqrt(a(t,n))},dotProduct:function(t,n){return t[l]*n[l]+t[s]*n[s]},UP:[0,-1],DOWN:[0,1],LEFT:[-1,0],RIGHT:[1,0],ZERO:[0,0],INF:[Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY],GAME_DIMENSIONS:[500,500],CENTER_SCREEN:[250,250]},S=function(t,n){return[O(n[0],t[0]),O(n[1],t[1])]};function A(t,n){return function(t,n,r){if(r||2===arguments.length)for(var e,o=0,i=n.length;o<i;o++)!e&&o in n||(e||(e=Array.prototype.slice.call(n,0,o)),e[o]=n[o]);return t.concat(e||Array.prototype.slice.call(n))}([],t,!0).map((function(t){return C.add(t,n)}))}const j=function(t){return function(n){return n?n[t]:[0,0]}};var w,P=function(t,n,r){if(r||2===arguments.length)for(var e,o=0,i=n.length;o<i;o++)!e&&o in n||(e||(e=Array.prototype.slice.call(n,0,o)),e[o]=n[o]);return t.concat(e||Array.prototype.slice.call(n))},T=function(t){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];return function(){for(var r=[],e=0;e<arguments.length;e++)r[e]=arguments[e];return t.apply(void 0,P(P([],n,!1),r,!1))}};!function(t){t[t.real=0]="real",t[t.topLeft=1]="topLeft",t[t.top=2]="top",t[t.topRight=3]="topRight",t[t.left=4]="left",t[t.right=5]="right",t[t.bottomLeft=6]="bottomLeft",t[t.bottom=7]="bottom",t[t.bottomRight=8]="bottomRight"}(w||(w={}));var D=[C.fromComponents(0,0),C.fromComponents(-C.GAME_DIMENSIONS[0],-C.GAME_DIMENSIONS[1]),C.fromComponents(0,-C.GAME_DIMENSIONS[1]),C.fromComponents(C.GAME_DIMENSIONS[0],-C.GAME_DIMENSIONS[1]),C.fromComponents(-C.GAME_DIMENSIONS[0],0),C.fromComponents(C.GAME_DIMENSIONS[0],0),C.fromComponents(-C.GAME_DIMENSIONS[0],C.GAME_DIMENSIONS[1]),C.fromComponents(0,C.GAME_DIMENSIONS[1]),C.fromComponents(C.GAME_DIMENSIONS[0],C.GAME_DIMENSIONS[1])];const _={fromVector:T(A,D),fromComponents:function(t,n){return function(t,n,r){return A(t,C.fromComponents(n,r))}(D,t,n)},addVector:A,real:j(w.real),closestTo:function(t,n){var r=t.map((function(t){return C.distanceSquared(t,n)})).reduce((function(t,n,r){return n<t[0]?[n,r]:t}),[Number.MAX_SAFE_INTEGER,Number.MAX_SAFE_INTEGER])[1];return t[r]},constrain:function(t,n){return function(r){var e=j(n)(r),o=S(C.GAME_DIMENSIONS,e);return A(t,o)}}(D,w.real)},R=function(t){return function(n){return n.map(t)}};var L=function(){return L=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},L.apply(this,arguments)},W=function(t,n,r){if(r||2===arguments.length)for(var e,o=0,i=n.length;o<i;o++)!e&&o in n||(e||(e=Array.prototype.slice.call(n,0,o)),e[o]=n[o]);return t.concat(e||Array.prototype.slice.call(n))};const G={reset:R((function(t){return L(L({},t),{hasCollidedWith:[]})})),checkAgainstMask:(V=function(t,n){return t.isCollidableWith(n)?function(t,n){if(t===n)return t;var r,e=_.real(t.position);r=t.position.length===n.position.length?_.closestTo(n.position,e):_.real(n.position);var o=C.distanceSquared(e,r),i=t.radius+n.radius;return o<=i*i?L(L({},t),{hasCollidedWith:W(W([],t.hasCollidedWith,!0),[n.type],!1)}):t}(t,n):t},function(t){return t.map((function(n){return t.reduce(V,n)}))})};var V;const k=function(t,n){return function(r){return n(t(r))}},B=function(t,n,r){return function(e){return t(e)?n(e):r(e)}},F=function(t){return t};var z=function(t,n){return B(t,n,F)};const q=function(t,n){return function(r){return t(r)&&n(r)}};var x=function(t){return t.hasCollidedWith.length>0},H=function(t){return function(n){return n.hasCollidedWith.filter((function(n){return n===t})).length>0}},Z=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n){return t.reduce((function(t,r){return t&&r in n}),!0)}},X=Z("velocity","position"),Y=Z("durability"),U=Z("rotation"),J=Z("ttl"),K=Z("acceleration"),Q=q(Z("position"),(function(t){return t.position.length>1})),$=function(t){return t.ttl<1},tt=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n){return t.reduce((function(t,r){return t||n.type===r}),!1)}},nt=tt(2),rt=tt(1),et=tt(0),ot=(1,function(t){return 1===t.owner}),it=q(nt,ot),ut=q((function(t){return(null==t?void 0:t.durability)<1}),et),ct=function(t){return 5===t.type},at=tt(6),ft=tt(7),lt=tt(4),st=[lt,x,function(t){return t.delete}].reduce(q),pt=function(){return pt=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},pt.apply(this,arguments)};const dt=R(z(K,(function(t){return pt(pt({},t),{velocity:C.add(t.velocity,C.fromDegreesAndMagnitude(t.rotation,t.acceleration))})})));var vt=function(){return vt=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},vt.apply(this,arguments)};const gt=R(z(Q,(function(t){return vt(vt({},t),{position:_.constrain(t.position)})}))),ht=function(t,n){return function(r){return t(r)||n(r)}};var yt=function(){return yt=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},yt.apply(this,arguments)};const mt=function(t){return yt(yt({},t),{delete:!0})},bt=R(z(q(x,[ct,nt,lt].reduce(ht)),mt)),Et=R(z((function(t){return C.magnitude(C.subtract(_.real(t.position),C.CENTER_SCREEN))>500}),mt)),Ot=function(t,n){return R(z(q(tt(t),H(n)),mt))},Mt=T(Ot,1),Nt=Mt(0);var It=[nt].reduce(ht);const Ct=R(z(q(It,$),mt)),St=Ot(7,4),At=Mt(4);var jt=function(){return jt=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},jt.apply(this,arguments)};const wt=z(Q,(function(t){return jt(jt({},t),{position:[_.real(t.position)]})})),Pt=R(z([ct,$,Q].reduce(q),wt));var Tt=function(t,n){return(Math.random()-.5)*n+t},Dt=function(t,n){return void 0===n&&(n=0),n+Math.random()*(t-n)},_t=function(t,n){return void 0===n&&(n=0),Math.floor(Dt(t+1,n))},Rt=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return t[_t(t.length-1)]};function Lt(t,n,r,e){return void 0===e&&(e=3),{position:_.fromVector(t),radius:r,velocity:n,type:e,delete:!1}}var Wt=function(){return Wt=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},Wt.apply(this,arguments)},Gt=function(t,n){return function(t,n,r,e){return void 0===r&&(r=0),void 0===e&&(e=0),Wt(Wt({},Lt(t,n,3,5)),{hasCollidedWith:[],isCollidableWith:ht(rt,lt),rotation:r,angularVelocity:e,ttl:1200})}(t,n,_t(360),Rt(-2,2))};const Vt=k(R(z(q(ft,H(2)),(function(t){var n=new Array(t.count).fill(1).map((function(n){return function(t){return Gt(_.real(t.position),[C.fromDegreesAndMagnitude(_t(360),C.magnitude(t.velocity)/3+.1),t.velocity].reduce(C.add))}(t)}));return n}))),(function(t){return t.flat()}));var kt=function(){return kt=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},kt.apply(this,arguments)};const Bt=R(z(q(H(6),k(Q,(function(t){return!t}))),(function(t){return kt(kt({},t),{position:_.fromVector(_.real(t.position))})})));var Ft=function(){return Ft=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},Ft.apply(this,arguments)};const zt=R(z(X,(function(t){return Ft(Ft({},t),{position:_.addVector(t.position,t.velocity)})})));var qt=function(){return qt=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},qt.apply(this,arguments)},xt=T((function(t,n){return qt(qt({},n),{acceleration:t})}),0);const Ht=R(z(K,xt));var Zt=function(){return Zt=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},Zt.apply(this,arguments)};const Xt=R(z(rt,(function(t){return Zt(Zt({},t),{angularVelocity:0})})));var Yt=function(){return Yt=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},Yt.apply(this,arguments)},Ut=function(t){return R(z(rt,(n=t,function(t){return Yt(Yt({},t),{angularVelocity:n})})));var n};const Jt=R(z(U,(function(t){return Yt(Yt({},t),{rotation:t.rotation+t.angularVelocity})})));var Kt=function(){return Kt=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},Kt.apply(this,arguments)},Qt=[15,25],$t={hasCollidedWith:[],durability:3,size:2,isCollidableWith:ht(it,at),radius:40,type:0,delete:!1},tn=function(t){var n,r=T((n=t.size-1,function(t,r,e,o){return void 0===e&&(e=3),void 0===o&&(o=Qt),Kt(Kt({},Lt(t,r,o[n],0)),{hasCollidedWith:[],durability:e,size:n,isCollidableWith:it})}),_.real(t.position));return 0===t.size?[Kt(Kt({},t),{delete:!0}),Gt(_.real(t.position),t.velocity)]:function(t,n,r,e){void 0===n&&(n=30),void 0===r&&(r=5),void 0===e&&(e=1.1);var o=C.degrees(t.velocity),i=[o+n+r,o-n-r],u=C.magnitude(t.velocity);return i.map((function(t){return function(t,n){return C.fromDegreesAndMagnitude(Tt(t,n),1)}(t,2*n)})).map((function(t){return C.scale(t,u,e)}))}(t).map((function(t){return r(t)})).concat(Kt(Kt({},t),{delete:!0}))};const nn=k(R(z(ut,(function(t){return tn(t)}))),(function(t){return t.flat()}));var rn=function(){return rn=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},rn.apply(this,arguments)};const en=R(z(J,(function(t){return rn(rn({},t),{ttl:t.ttl-1})})));var on=function(){return on=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},on.apply(this,arguments)};const un=z(Y,(function(t){return on(on({},t),{durability:t.durability-1})})),cn=R(z(H(2),un));var an=[function(t){return t.filter((function(t){return!t.delete}))},G.reset,zt,gt,Jt,Xt,en,G.checkAgainstMask,cn,bt,Nt,At,nn,dt,Et,St,Ct,Pt,Vt,Ht,Bt].reduce(k);const fn=function(t){return t.filter((function(t){return 1===t.type}))[0]};var ln=function(t){return function(n){var r=fn(t());return r?n+(5,function(t){return t.hasCollidedWith.filter((function(t){return 5===t})).length})(r):n}},sn=function(t,n,r,e,o){var i=o-e;return[t,C.scale(n,i),C.scale(r(i),.5,i*i)].reduce(C.add)},pn=function(t){return{position:C.ZERO,type:0}};const dn=function(t){return function(n){for(var r=Array.from(n);r.length>t;)r.pop();return r}};var vn,gn,hn=function(t){var n=t.offset,r=void 0===n?function(){return Dt(2*Math.PI)}:n,e=t.amplitude,o=void 0===e?5:e,i=t.period,u=void 0===i?10:i,c=t.waveLine;return function(){var t=c(),n=r();return function(r){return C.fromDegreesAndMagnitude(t,Math.sin(r/u+n)*o/(r*r))}}},yn=(vn=C.ZERO,function(){return function(t){return vn}}),mn=function(t,n){return n.concat(t)},bn=(gn=C.GAME_DIMENSIONS,function(t,n,r,e,o,i){return void 0===e&&(e=Number.MAX_SAFE_INTEGER),function(u){return u>=e+t?{position:C.INF,type:i}:{position:S(gn,sn(n,r,o,t,u)),type:i}}}),En=function(t){var n=new Array(t.number).fill(pn);return n.map((function(n){return bn(t.timer(),t.location,C.fromDegreesAndMagnitude(Tt(t.angle,t.spread),t.speed),t.lifetime,t.acceleration(),t.type)}))},On=function(t,n,r){return{get location(){return[_.real(t.position),C.fromDegreesAndMagnitude(t.rotation,-5),C.fromDegreesAndMagnitude(t.rotation+90,n)].reduce(C.add)},get speed(){return 1.5*C.magnitude(t.velocity)},get angle(){return t.rotation+180},spread:0,get number(){return _t(1,0)},get lifetime(){return _t(15,5)},timer:r,acceleration:hn({waveLine:function(){return t.rotation+90}}),type:0}},Mn=function(t){return function(n){return En(On(n,-5,t))}},Nn=function(t){return function(n){return En(On(n,5,t))}},In=function(t,n){return function(r,e){return function(o){var i=r().filter(n).map(t(e)).reduce(mn,[]);return mn(o,i)}}},Cn=In((function(t){return function(n){return En({get location(){return _.real(n.position)},get speed(){return Dt(3,1)},angle:0,spread:360,get number(){return 2*n.radius},get lifetime(){return _t(120,60)},timer:t,acceleration:yn,type:0})}}),(function(t){return 0===t.type&&t.delete})),Sn=In((function(t){return function(n){var r=n.rotation+90;return En({get location(){return _.real(n.position)},get speed(){return.2*C.magnitude(n.velocity)*Dt(1)},get angle(){return n.rotation+180},spread:15,get number(){return _t(1,0)},get lifetime(){return _t(45,15)},timer:t,acceleration:hn({waveLine:function(){return r}}),type:0})}}),nt),An=In((function(t){return function(n){return En({get location(){return _.real(n.position)},get speed(){return Dt(1)},get angle(){return n.rotation+180},spread:110,get number(){return _t(60,30)},get lifetime(){return _t(60)},timer:t,acceleration:function(){return function(t){return C.fromDegreesAndMagnitude(O(20*t,360)+Tt(0,360),10/(t*t))}},type:0})}}),q(nt,x)),jn=In((function(t){return function(n){return[Nn(t)(n),Mn(t)(n)].flat()}}),q(rt,(function(t){return t.acceleration>0}))),wn=In((function(t){return function(n){return En({get location(){return _.real(n.position)},get speed(){return.15*C.magnitude(n.velocity)*Dt(1)},get angle(){return n.rotation},spread:60,get number(){return _t(10,5)},get lifetime(){return _t(100)},timer:t,acceleration:function(){return function(t){return C.fromDegreesAndMagnitude(O(10*t,360)+Tt(0,360),5/(t*t))}},type:0})}}),(function(t){return nt(t)&&t.hasCollidedWith.length<1&&t.delete})),Pn=In((function(t){return function(n){return En({get location(){return _.real(n.position)},get speed(){return Dt(.5,.15)},angle:0,spread:360,get number(){return _t(40,30)},get lifetime(){return _t(520,400)},timer:t,acceleration:yn,type:0})}}),q(rt,(function(t){return t.delete}))),Tn=In(Nn,q(rt,(function(t){return t.angularVelocity<0}))),Dn=In(Mn,q(rt,(function(t){return t.angularVelocity>0}))),_n=In((function(t){return function(n){return En({get location(){return _.real(n.position)},get speed(){return Dt(.5)},angle:0,spread:360,number:10,get lifetime(){return _t(360,180)},timer:t,acceleration:yn,type:0})}}),st),Rn=In((function(t){return function(n){return En({get location(){return _.real(n.position)},speed:0,angle:0,spread:0,number:1,lifetime:600,timer:t,acceleration:yn,type:1})}}),st),Ln=dn(1e3),Wn=function(t,n){return t+n},Gn=function(t){return function(n){var r=t().filter(ft),e=t().filter(q(ct,H(4))),o=function(t){return t.length<1?0:t.filter(H(4)).map((function(t){return t.count})).reduce(Wn,0)}(r),i=function(t){return t.length||0}(e);return n+o+i}},Vn=document.getElementById("canvas");Vn.width=C.GAME_DIMENSIONS[0],Vn.height=C.GAME_DIMENSIONS[1];var kn=Vn.getContext("2d");function Bn(t){return function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];kn.save(),t.apply(void 0,n),kn.restore()}}kn.translate(.5,.5),kn.imageSmoothingEnabled=!1,kn.fillColor="black",kn.strokeStyle="rgb(0,255,0)";const Fn=Bn((function(t,n,r){var e=void 0===r?{}:r,o=e.color,i=void 0===o?"rgb(0,255,0)":o,u=e.size,c=void 0===u?"1em":u;kn.textAlign="center",kn.textBaseline="top",kn.font=c+" sans-serif",kn.fillStyle=i;var a=t(),f=a[0],l=a[1];kn.fillText(n(),f,l)})),zn=function(t){return function(n){return t(n),n}};var qn=function(t){var n=t[0],r=n[0],e=n[1],o=t[1];kn.moveTo(r,e),kn.beginPath(),kn.arc(r,e,o.radius,0,2*Math.PI),kn.stroke()};const xn=function(t,n){return R(z(t,(r=Bn(n),function(t){return t.position.forEach((function(n){return r([n,t])})),t})));var r};var Hn=function(t,n){var r=t[0],e=t[1];kn.translate(r,e),kn.rotate(2*Math.PI/360*n),kn.translate(-r,-e)};const Zn=function(t){return function(n){var r=n[0],e=n[1],o=2*Math.PI/t,i=new Array(t).fill(1).map((function(t,n){return(n+1)*o})).map((function(t){return[Math.cos(t),Math.sin(t)]})).map((function(t){return C.scale(t,e.radius)})).map((function(t){return C.add(t,r)}));kn.beginPath(),Hn(r,e.rotation),kn.moveTo.apply(kn,i[0]),i.forEach((function(t){return kn.lineTo.apply(kn,t)})),kn.lineTo.apply(kn,i[0]),kn.stroke()}};var Xn=xn(et,qn),Yn=xn(ct,Zn(4)),Un=xn(rt,(function(t){var n=t[0],r=t[1],e=n[0],o=n[1];Hn(n,r.rotation),kn.beginPath(),kn.moveTo(e-4,o+7),kn.lineTo(e-4,o-7),kn.lineTo(e+10,o),kn.lineTo(e-4,o+7),kn.stroke()})),Jn=xn(nt,(function(t){var n=t[0],r=t[1],e=n[0],o=n[1];Hn(n,r.rotation),kn.beginPath(),kn.moveTo(e,o+2),kn.lineTo(e-4,o),kn.lineTo(e,o-2),kn.lineTo(e+4,o),kn.lineTo(e,o+2),kn.stroke()})),Kn=xn(lt,Zn(6)),Qn=xn(ft,Zn(5)),$n=("position",function(t){return t.position});const tr=function(t){return zn(k($n,Bn(t)))};var nr=tr((function(t){return qn([t,{radius:1}])})),rr=tr((function(t){Fn((function(){return t}),(function(){return"X"}))})),er=function(t,n){return n.map((function(n){return n(t)}))},or=[Xn,Un,Jn,Yn,Kn,Qn].reduce(k);function ir(){return C.add(C.fromDegreesAndMagnitude(_t(360),400),C.CENTER_SCREEN)}function ur(t,n){void 0===t&&(t=1);var r=C.add(C.fromDegreesAndMagnitude(_t(360),100),C.CENTER_SCREEN),e=C.normalize(C.subtract(r,n));return C.scale(e,Math.max(.5,Math.random()*t))}const cr=(ar=ir,fr=ur,function(t){return function(n){var r,e;if(n.filter((function(t){return 0===t.type})).length-1<.05555555555555555*(t+1)){var o=ar();return n.concat((r=o,e=fr(.027777777777777776*t,o),Kt(Kt({},$t),{position:[r],velocity:e})))}return n}});var ar,fr,lr=function(){return lr=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},lr.apply(this,arguments)},sr={position:[],velocity:[0,0],hasCollidedWith:[],isCollidableWith:nt,type:4,delete:!1,radius:8,rotation:0,angularVelocity:0};const pr=function(t,n){return function(r){return function(e){if(e.filter((function(t){return 4===t.type})).length<1){var o=t(),i=n(.015625*r,o);return e.concat(function(t,n){return function(t,n,r,e){return void 0===r&&(r=0),void 0===e&&(e=0),lr(lr({},sr),{position:[t],velocity:n,rotation:r,angularVelocity:e})}(t,n,_t(360),Rt(-2,2,1.5,-1.5))}(o,i))}return e}}}(ir,ur);var dr=function(t){var n={state:t};return function(t){return void 0!==t&&(n.state=t(n.state)),n.state}},vr=function(){return vr=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},vr.apply(this,arguments)},gr=[et,ct,lt].reduce(ht),hr=function(t){return vr(vr({},t),{acceleration:.02})};var yr=function(){return yr=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},yr.apply(this,arguments)},mr={ttl:200,position:[C.ZERO],velocity:C.ZERO,radius:1,rotation:0,hasCollidedWith:[],isCollidableWith:function(){return!1},owner:3,angularVelocity:0,type:2,delete:!1},br=z(q((function(t){return t.filter(it).length<3}),(function(t){return t.filter(rt).length>0})),(function(t){var n=fn(t);return t.concat(function(t){return n={location:C.add(_.real(t.position),C.fromDegreesAndMagnitude(t.rotation,10)),rotation:t.rotation,owner:1,isCollidableWith:[et,ft,lt].reduce(ht),inheritedVelocity:t.velocity},r=C.fromDegreesAndMagnitude(n.rotation,4),yr(yr({},mr),{position:_.fromVector(n.location),velocity:C.add(r,n.inheritedVelocity),ttl:200,rotation:n.rotation,isCollidableWith:n.isCollidableWith,owner:n.owner});var n,r}(n))}));const Er=function(t,n){return function(){return t(n)}};var Or=function(){return Or=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},Or.apply(this,arguments)},Mr={count:0,position:[],velocity:[0,0],rotation:0,angularVelocity:0,type:7,delete:!1,radius:4,hasCollidedWith:[],isCollidableWith:ht(lt,nt),durability:1},Nr={},Ir={},Cr={isButtonPushed:function(t){return!(!Nr[t]||Ir[t]||(Ir[t]=!0,0))},isButtonHeld:function(t){return Nr[t]}};addEventListener("keypress",(function(t){Nr[t.key]=!0})),addEventListener("keyup",(function(t){Nr[t.key]=!1,Ir[t.key]=!1}));const Sr=Cr;var Ar,jr,wr,Pr,Tr,Dr={timer:dr(0),paused:dr(!1),objectList:dr(new Array),particleList:dr(new Array),score:dr(0),ore:dr(0)},_r=B((Ar=Dr).paused,(function(){return Fn((function(){return C.CENTER_SCREEN}),(function(){return"PAUSED"}),{size:"2em"})}),(function(){var t;or(Ar.objectList()),(t=Ar.timer(),function(n){return[T(er,t),R(z(tt(0),zn(nr))),R(z(tt(1),zn(rr)))].reduce(k)(n)})(Ar.particleList()),Fn((function(){return[C.CENTER_SCREEN[0],20]}),(function(){return"SCORE: "+Ar.score()})),Fn((function(){return[C.CENTER_SCREEN[0],40]}),(function(){return"CARGO: "+Ar.ore()}))})),Rr=function(t){var n,r=[Ut(4),Ut(-4)],e=r[0],o=r[1],i={fire:Er(t.objectList,br),rotateClockwise:Er(t.objectList,e),rotateCounterclockwise:Er(t.objectList,o),accelerate:Er(t.objectList,R(z(rt,hr))),reset:function(){return function(t){t.timer((function(t){return 0})),t.paused((function(t){return!1})),t.objectList((function(t){return[vr(vr({},Lt(C.CENTER_SCREEN,[0,0],6,1)),{rotation:0,acceleration:0,hasCollidedWith:[],isCollidableWith:gr,angularVelocity:0}),{radius:100,position:[C.CENTER_SCREEN],type:6,isCollidableWith:function(t){return!1},hasCollidedWith:[]}]})),t.particleList((function(t){return[]})),t.score((function(t){return 0})),t.ore((function(t){return 0}))}(t)},pause:Er(t.paused,(function(t){return!t})),jettison:Er(t.objectList,(n=t.ore,function(t){var r=n();if(r<1)return t;var e,o,i=fn(t);return i?(n((function(t){return 0})),t.concat((e=_.real(i.position),o=i.velocity,function(t,n,r,e,o){return void 0===e&&(e=0),void 0===o&&(o=0),Or(Or({},Mr),{position:[t],velocity:n,count:r,rotation:e,angularVelocity:o})}(e,o,r,_t(360),Rt(-2,2,2.5,-2.5))))):t}))};return i}(Dr),Lr=(jr=Dr.objectList,wr=Dr.timer,[(Pr=jr,Tr=wr,[Cn,Sn,An,jn,wn,Pn,Dn,Tn,_n,Rn].map((function(t){return t(Pr,Tr)})).reduce(k)),function(t){return function(n){return n.filter(function(t){return function(n){return n(t())[0]!==Number.POSITIVE_INFINITY}}(t))}}(wr),Ln].reduce(k)),Wr=function(t){return[ln(t)].reduce(k)}(Dr.objectList),Gr=function(t){return[Gn(t)].reduce(k)}(Dr.objectList);Rr.reset();var Vr=0,kr=[0];setInterval((function(){Error("Throw an error pls")}),3e3),setInterval((function(){!function(){var t=C.GAME_DIMENSIONS,n=t[0],r=t[1];kn.fillRect(-10,-10,n+15,r+15)}(),_r(),Fn((function(){return[40,10]}),(function(){return"FPS: "+Math.round(1e3/((t=kr).reduce((function(t,n){return t+n}))/t.length));var t}))}),1e3),setInterval((function(){Sr.isButtonPushed("p")&&Rr.pause(),Sr.isButtonPushed("o")&&Rr.reset(),Dr.paused()||(Sr.isButtonHeld("w")&&Rr.accelerate(),Sr.isButtonHeld("a")&&Rr.rotateCounterclockwise(),Sr.isButtonHeld("d")&&Rr.rotateClockwise(),Sr.isButtonPushed("Enter")&&Rr.fire(),Sr.isButtonPushed("c")&&Rr.jettison(),Dr.particleList(Lr),Dr.objectList(an),Dr.score(Gr),Dr.ore(Wr),Dr.timer()%60==0&&Dr.objectList(cr(Dr.score())),Dr.timer()%3600==600&&Dr.objectList(pr(Dr.score())),Dr.timer((function(t){return++t})),kr.unshift(Date.now()-Vr),kr=dn(30)(kr),Vr=Date.now())}),1e3)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,