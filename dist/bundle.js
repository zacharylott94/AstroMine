(()=>{"use strict";var t=[0,1],n=t[0],r=t[1],e=[0,1],o=e[0],i=e[1];const u=function(t,n){return[t[o]-n[o],t[i]-n[i]]},a=function(t){var n=t[0],r=t[1];return n*n+r*r},c=function(t,n){return a(u(t,n))};var f=[0,1],l=f[0],s=f[1];const p=function(t){return Math.sqrt(a(t))};var d=[0,1],v=d[0],h=d[1];const g=function(t){return[t[v]/p(t),t[h]/p(t)]};var y=[0,1],m=y[0],b=y[1];const E=function(t){return Math.atan2(g(t)[b],g(t)[m])},O=function(t,n){return(t%n+n)%n};var M=[0,1],N=M[0],I=M[1];const C={fromComponents:function(t,n){return[t,n]},new:function(t,n){return[t,n]},fromDegreesAndMagnitude:function(t,n){var r=2*Math.PI/360*t;return[Math.cos(r)*n,Math.sin(r)*n]},add:function(t,e){return[t[n]+e[n],t[r]+e[r]]},subtract:u,scale:function(t){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];var e=n.reduce((function(t,n){return t*n}));return[t[N]*e,t[I]*e]},degrees:function(t){var n=E(t);return O(360*n/2/Math.PI,360)},radians:E,normalize:g,magnitude:p,squaredMagnitude:a,distanceSquared:c,distance:function(t,n){return Math.sqrt(c(t,n))},dotProduct:function(t,n){return t[l]*n[l]+t[s]*n[s]},UP:[0,-1],DOWN:[0,1],LEFT:[-1,0],RIGHT:[1,0],ZERO:[0,0],INF:[Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY],GAME_DIMENSIONS:[500,500],CENTER_SCREEN:[250,250]},A=function(t,n){return[O(n[0],t[0]),O(n[1],t[1])]};function S(t,n){return function(t,n,r){if(r||2===arguments.length)for(var e,o=0,i=n.length;o<i;o++)!e&&o in n||(e||(e=Array.prototype.slice.call(n,0,o)),e[o]=n[o]);return t.concat(e||Array.prototype.slice.call(n))}([],t,!0).map((function(t){return C.add(t,n)}))}const w=function(t){return function(n){return n?n[t]:[0,0]}};var j,_=function(t,n,r){if(r||2===arguments.length)for(var e,o=0,i=n.length;o<i;o++)!e&&o in n||(e||(e=Array.prototype.slice.call(n,0,o)),e[o]=n[o]);return t.concat(e||Array.prototype.slice.call(n))},P=function(t){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];return function(){for(var r=[],e=0;e<arguments.length;e++)r[e]=arguments[e];return t.apply(void 0,_(_([],n,!1),r,!1))}};!function(t){t[t.real=0]="real",t[t.topLeft=1]="topLeft",t[t.top=2]="top",t[t.topRight=3]="topRight",t[t.left=4]="left",t[t.right=5]="right",t[t.bottomLeft=6]="bottomLeft",t[t.bottom=7]="bottom",t[t.bottomRight=8]="bottomRight"}(j||(j={}));var D=[C.fromComponents(0,0),C.fromComponents(-C.GAME_DIMENSIONS[0],-C.GAME_DIMENSIONS[1]),C.fromComponents(0,-C.GAME_DIMENSIONS[1]),C.fromComponents(C.GAME_DIMENSIONS[0],-C.GAME_DIMENSIONS[1]),C.fromComponents(-C.GAME_DIMENSIONS[0],0),C.fromComponents(C.GAME_DIMENSIONS[0],0),C.fromComponents(-C.GAME_DIMENSIONS[0],C.GAME_DIMENSIONS[1]),C.fromComponents(0,C.GAME_DIMENSIONS[1]),C.fromComponents(C.GAME_DIMENSIONS[0],C.GAME_DIMENSIONS[1])];const T={fromVector:P(S,D),fromComponents:function(t,n){return function(t,n,r){return S(t,C.fromComponents(n,r))}(D,t,n)},addVector:S,real:w(j.real),closestTo:function(t,n){var r=t.map((function(t){return C.distanceSquared(t,n)})).reduce((function(t,n,r){return n<t[0]?[n,r]:t}),[Number.MAX_SAFE_INTEGER,Number.MAX_SAFE_INTEGER])[1];return t[r]},constrain:function(t,n){return function(r){var e=w(n)(r),o=A(C.GAME_DIMENSIONS,e);return S(t,o)}}(D,j.real)},R=function(t){return function(n){return n.map(t)}};var W=function(){return W=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},W.apply(this,arguments)},L=function(t,n,r){if(r||2===arguments.length)for(var e,o=0,i=n.length;o<i;o++)!e&&o in n||(e||(e=Array.prototype.slice.call(n,0,o)),e[o]=n[o]);return t.concat(e||Array.prototype.slice.call(n))};const G={reset:R((function(t){return W(W({},t),{hasCollidedWith:[]})})),checkAgainstMask:(V=function(t,n){return t.isCollidableWith(n)?function(t,n){if(t===n)return t;var r,e=T.real(t.position);r=t.position.length===n.position.length?T.closestTo(n.position,e):T.real(n.position);var o=C.distanceSquared(e,r),i=t.radius+n.radius;return o<=i*i?W(W({},t),{hasCollidedWith:L(L([],t.hasCollidedWith,!0),[n.type],!1)}):t}(t,n):t},function(t){return t.map((function(n){return t.reduce(V,n)}))})};var V;const k=function(t,n){return function(r){return n(t(r))}},B=function(t,n,r){return function(e){return t(e)?n(e):r(e)}},F=function(t){return t};var x=function(t,n){return B(t,n,F)};const z=function(t,n){return function(r){return t(r)&&n(r)}};var H=function(t){return t.hasCollidedWith.length>0},q=function(t){return function(n){return n.hasCollidedWith.filter((function(n){return n===t})).length>0}},Z=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n){return t.reduce((function(t,r){return t&&r in n}),!0)}},X=Z("velocity","position"),Y=Z("durability"),U=Z("rotation"),J=Z("ttl"),K=Z("acceleration"),Q=z(Z("position"),(function(t){return t.position.length>1})),$=function(t){return t.ttl<1},tt=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n){return t.reduce((function(t,r){return t||n.type===r}),!1)}},nt=tt(2),rt=tt(1),et=tt(0),ot=(1,function(t){return 1===t.owner}),it=z(nt,ot),ut=z((function(t){return(null==t?void 0:t.durability)<1}),et),at=function(t){return 5===t.type},ct=tt(6),ft=tt(7),lt=tt(4),st=[lt,H,function(t){return t.delete}].reduce(z),pt=function(){return pt=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},pt.apply(this,arguments)};const dt=R(x(K,(function(t){return pt(pt({},t),{velocity:C.add(t.velocity,C.fromDegreesAndMagnitude(t.rotation,t.acceleration))})})));var vt=function(){return vt=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},vt.apply(this,arguments)};const ht=R(x(Q,(function(t){return vt(vt({},t),{position:T.constrain(t.position)})}))),gt=function(t,n){return function(r){return t(r)||n(r)}};var yt=function(){return yt=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},yt.apply(this,arguments)};const mt=function(t){return yt(yt({},t),{delete:!0})},bt=R(x(z(H,[nt,lt].reduce(gt)),mt)),Et=R(x((function(t){return C.magnitude(C.subtract(T.real(t.position),C.CENTER_SCREEN))>500}),mt));var Ot=[nt].reduce(gt);const Mt=R(x(z(Ot,$),mt));var Nt,It,Ct=function(t,n){return(Math.random()-.5)*n+t},At=function(t,n){return void 0===n&&(n=0),n+Math.random()*(t-n)},St=function(t,n){return void 0===n&&(n=0),Math.floor(At(t+1,n))},wt=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return t[St(t.length-1)]},jt="/asteroids/src/sfx/",_t=function(t){return function(n){return new Audio(jt+t).play(),n}},Pt=function(t){return function(n){return new Audio(jt+wt.apply(void 0,t)).play(),n}},Dt=Pt(["shoot.wav","shoot2.wav","shoot3.wav"]),Tt=Pt(["asteroid_hit.wav","asteroid_hit2.wav","asteroid_hit3.wav"]),Rt=Pt(["asteroid_shatter.wav","asteroid_shatter2.wav","asteroid_shatter3.wav"]),Wt=_t("player_kill.wav"),Lt=_t("pause.wav"),Gt=(Nt="drone_spawn.wav",function(t){return function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];return _t(Nt)(),t.apply(void 0,n)}}),Vt=_t("ore_pickup.wav"),kt=_t("jettison.wav"),Bt=_t("drone_pickup.wav"),Ft=((It=new Audio(jt+"thrust.wav")).loop=!0,{play:function(){return It.play()},pause:function(){return It.pause()}}),xt=_t("restart.wav");const zt=function(t,n){for(var r=[],e=2;e<arguments.length;e++)r[e-2]=arguments[e];return R(x(z(tt(n),r.map(q).reduce(gt)),t))},Ht=zt(k(Bt,mt),5,4),qt=zt(k(Bt,mt),7,4),Zt=zt(k(Vt,mt),5,1),Xt=zt(k(Wt,mt),1,0,4);var Yt=function(){return Yt=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},Yt.apply(this,arguments)};const Ut=x(Q,(function(t){return Yt(Yt({},t),{position:[T.real(t.position)]})})),Jt=R(x([at,$,Q].reduce(z),Ut));function Kt(t,n,r,e){return void 0===e&&(e=3),{position:T.fromVector(t),radius:r,velocity:n,type:e,delete:!1}}var Qt=function(){return Qt=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},Qt.apply(this,arguments)},$t=function(t,n){return function(t,n,r,e){return void 0===r&&(r=0),void 0===e&&(e=0),Qt(Qt({},Kt(t,n,3,5)),{hasCollidedWith:[],isCollidableWith:gt(rt,lt),rotation:r,angularVelocity:e,ttl:1200})}(t,n,St(360),wt(-2,2))};const tn=k(R(x(z(ft,q(2)),(function(t){var n=new Array(t.count).fill(1).map((function(n){return function(t){return $t(T.real(t.position),[C.fromDegreesAndMagnitude(St(360),C.magnitude(t.velocity)/3+.1),t.velocity].reduce(C.add))}(t)}));return n}))),(function(t){return t.flat()}));var nn=function(){return nn=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},nn.apply(this,arguments)};const rn=R(x(z(q(6),k(Q,(function(t){return!t}))),(function(t){return nn(nn({},t),{position:T.fromVector(T.real(t.position))})})));var en=function(){return en=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},en.apply(this,arguments)};const on=R(x(X,(function(t){return en(en({},t),{position:T.addVector(t.position,t.velocity)})})));var un=function(){return un=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},un.apply(this,arguments)},an=P((function(t,n){return un(un({},n),{acceleration:t})}),0);const cn=R(x(K,an));var fn=function(){return fn=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},fn.apply(this,arguments)};const ln=R(x(rt,(function(t){return fn(fn({},t),{angularVelocity:0})})));var sn=function(){return sn=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},sn.apply(this,arguments)},pn=function(t){return R(x(rt,(n=t,function(t){return sn(sn({},t),{angularVelocity:n})})));var n};const dn=R(x(U,(function(t){return sn(sn({},t),{rotation:t.rotation+t.angularVelocity})})));var vn=function(){return vn=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},vn.apply(this,arguments)},hn=[15,25],gn={hasCollidedWith:[],durability:3,size:2,isCollidableWith:gt(it,ct),radius:40,type:0,delete:!1},yn=k(Rt,(function(t){var n,r=P((n=t.size-1,function(t,r,e,o){return void 0===e&&(e=3),void 0===o&&(o=hn),vn(vn({},Kt(t,r,o[n],0)),{hasCollidedWith:[],durability:e,size:n,isCollidableWith:it})}),T.real(t.position));return 0===t.size?[vn(vn({},t),{delete:!0}),$t(T.real(t.position),t.velocity)]:function(t,n,r,e){void 0===n&&(n=30),void 0===r&&(r=5),void 0===e&&(e=1.1);var o=C.degrees(t.velocity),i=[o+n+r,o-n-r],u=C.magnitude(t.velocity);return i.map((function(t){return function(t,n){return C.fromDegreesAndMagnitude(Ct(t,n),1)}(t,2*n)})).map((function(t){return C.scale(t,u,e)}))}(t).map((function(t){return r(t)})).concat(vn(vn({},t),{delete:!0}))}));const mn=k(R(x(ut,yn)),(function(t){return t.flat()}));var bn=function(){return bn=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},bn.apply(this,arguments)};const En=R(x(J,(function(t){return bn(bn({},t),{ttl:t.ttl-1})})));var On=function(){return On=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},On.apply(this,arguments)};const Mn=x(Y,(function(t){return On(On({},t),{durability:t.durability-1})}));var Nn=k(Tt,Mn);const In=R(x(q(2),Nn));var Cn=[function(t){return t.filter((function(t){return!t.delete}))},G.reset,on,ht,dn,ln,En,G.checkAgainstMask,In,bt,Xt,mn,dt,Et,qt,Mt,Zt,Ht,Jt,tn,cn,rn].reduce(k);const An=function(t){return t.filter((function(t){return 1===t.type}))[0]};var Sn=function(t){return function(n){var r=An(t());return r?n+(5,function(t){return t.hasCollidedWith.filter((function(t){return 5===t})).length})(r):n}},wn=function(t,n,r,e,o){var i=o-e;return[t,C.scale(n,i),C.scale(r(i),.5,i*i)].reduce(C.add)},jn=function(t){return{position:C.ZERO,type:0}};const _n=function(t){return function(n){for(var r=Array.from(n);r.length>t;)r.pop();return r}};var Pn,Dn,Tn=function(t){var n=t.offset,r=void 0===n?function(){return At(2*Math.PI)}:n,e=t.amplitude,o=void 0===e?5:e,i=t.period,u=void 0===i?10:i,a=t.yAxis;return function(){var t=r();return function(n){return C.fromDegreesAndMagnitude(a,Math.sin(n/u+t)*o/(n*n))}}},Rn=(Pn=C.ZERO,function(){return function(t){return Pn}}),Wn=function(t,n){return n.concat(t)},Ln=(Dn=C.GAME_DIMENSIONS,function(t,n,r,e,o,i){return void 0===e&&(e=Number.MAX_SAFE_INTEGER),function(u){return u>=e+t?{position:C.INF,type:i}:{position:A(Dn,wn(n,r,o,t,u)),type:i}}}),Gn=function(t){var n=new Array(t.number).fill(jn);return n.map((function(n){return Ln(t.timer(),t.location,C.fromDegreesAndMagnitude(Ct(t.angle,t.spread),t.speed),t.lifetime,t.acceleration(),t.type)}))},Vn=function(t,n,r){return{get location(){return[T.real(t.position),C.fromDegreesAndMagnitude(t.rotation,-5),C.fromDegreesAndMagnitude(t.rotation+90,n)].reduce(C.add)},get speed(){return 1.5*C.magnitude(t.velocity)},get angle(){return t.rotation+180},spread:0,get number(){return St(1,0)},get lifetime(){return St(15,5)},timer:r,acceleration:Tn({yAxis:t.rotation+90}),type:0}},kn=function(t){return function(n){return Gn(Vn(n,-5,t))}},Bn=function(t){return function(n){return Gn(Vn(n,5,t))}},Fn=function(t,n){return function(r,e){return function(o){var i=r().filter(n).map(t(e)).reduce(Wn,[]);return Wn(o,i)}}},xn=Fn((function(t){return function(n){return Gn({get location(){return T.real(n.position)},get speed(){return At(3,1)},angle:0,spread:360,get number(){return 2*n.radius},get lifetime(){return St(120,60)},timer:t,acceleration:Rn,type:0})}}),(function(t){return 0===t.type&&t.delete})),zn=Fn((function(t){return function(n){var r=n.rotation+90;return Gn({get location(){return T.real(n.position)},get speed(){return.2*C.magnitude(n.velocity)*At(1)},get angle(){return n.rotation+180},spread:15,get number(){return St(1,0)},get lifetime(){return St(45,15)},timer:t,acceleration:Tn({yAxis:r}),type:0})}}),nt),Hn=Fn((function(t){return function(n){return Gn({get location(){return T.real(n.position)},get speed(){return At(1)},get angle(){return n.rotation+180},spread:110,get number(){return St(60,30)},get lifetime(){return St(60)},timer:t,acceleration:function(){return function(t){return C.fromDegreesAndMagnitude(O(20*t,360)+Ct(0,360),10/(t*t))}},type:0})}}),z(nt,H)),qn=Fn((function(t){return function(n){return[Bn(t)(n),kn(t)(n)].flat()}}),z(rt,(function(t){return t.acceleration>0}))),Zn=Fn((function(t){return function(n){return Gn({get location(){return T.real(n.position)},get speed(){return.15*C.magnitude(n.velocity)*At(1)},get angle(){return n.rotation},spread:60,get number(){return St(10,5)},get lifetime(){return St(100)},timer:t,acceleration:function(){return function(t){return C.fromDegreesAndMagnitude(O(10*t,360)+Ct(0,360),5/(t*t))}},type:0})}}),(function(t){return nt(t)&&t.hasCollidedWith.length<1&&t.delete})),Xn=Fn((function(t){return function(n){return Gn({get location(){return T.real(n.position)},get speed(){return At(.5,.15)},angle:0,spread:360,get number(){return St(40,30)},get lifetime(){return St(210,180)},timer:t,acceleration:Rn,type:0})}}),z(rt,(function(t){return t.delete}))),Yn=Fn(Bn,z(rt,(function(t){return t.angularVelocity<0}))),Un=Fn(kn,z(rt,(function(t){return t.angularVelocity>0}))),Jn=Fn((function(t){return function(n){return Gn({get location(){return T.real(n.position)},get speed(){return At(.5)},angle:0,spread:360,number:10,get lifetime(){return St(360,180)},timer:t,acceleration:Rn,type:0})}}),st),Kn=Fn((function(t){return function(n){return Gn({get location(){return T.real(n.position)},speed:0,angle:0,spread:0,number:1,lifetime:600,timer:t,acceleration:Rn,type:1})}}),st),Qn=_n(1e3),$n=function(t,n){return t+n},tr=function(t){return function(n){var r=t().filter(ft),e=t().filter(z(at,q(4))),o=function(t){return t.length<1?0:t.filter(q(4)).map((function(t){return t.count})).reduce($n,0)}(r),i=function(t){return t.length||0}(e);return n+o+i}},nr=document.getElementById("canvas");nr.width=C.GAME_DIMENSIONS[0],nr.height=C.GAME_DIMENSIONS[1];var rr=nr.getContext("2d");function er(t){return function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];rr.save(),t.apply(void 0,n),rr.restore()}}rr.translate(.5,.5),rr.imageSmoothingEnabled=!1,rr.fillColor="black",rr.strokeStyle="rgb(0,255,0)";const or=er((function(t,n,r){var e=void 0===r?{}:r,o=e.color,i=void 0===o?"rgb(0,255,0)":o,u=e.size,a=void 0===u?"1em":u;rr.textAlign="center",rr.textBaseline="top",rr.font=a+" sans-serif",rr.fillStyle=i;var c=t(),f=c[0],l=c[1];rr.fillText(n(),f,l)})),ir=function(t){return function(n){return t(n),n}};var ur=function(t){var n=t[0],r=n[0],e=n[1],o=t[1];rr.moveTo(r,e),rr.beginPath(),rr.arc(r,e,o.radius,0,2*Math.PI),rr.stroke()};const ar=function(t,n){return R(x(t,(r=er(n),function(t){return t.position.forEach((function(n){return r([n,t])})),t})));var r};var cr=function(t,n){var r=t[0],e=t[1];rr.translate(r,e),rr.rotate(2*Math.PI/360*n),rr.translate(-r,-e)};const fr=function(t){return function(n){var r=n[0],e=n[1],o=2*Math.PI/t,i=new Array(t).fill(1).map((function(t,n){return(n+1)*o})).map((function(t){return[Math.cos(t),Math.sin(t)]})).map((function(t){return C.scale(t,e.radius)})).map((function(t){return C.add(t,r)}));rr.beginPath(),cr(r,e.rotation),rr.moveTo.apply(rr,i[0]),i.forEach((function(t){return rr.lineTo.apply(rr,t)})),rr.lineTo.apply(rr,i[0]),rr.stroke()}};var lr=ar(et,ur),sr=ar(at,fr(4)),pr=ar(rt,(function(t){var n=t[0],r=t[1],e=n[0],o=n[1];cr(n,r.rotation),rr.beginPath(),rr.moveTo(e-4,o+7),rr.lineTo(e-4,o-7),rr.lineTo(e+10,o),rr.lineTo(e-4,o+7),rr.stroke()})),dr=ar(nt,(function(t){var n=t[0],r=t[1],e=n[0],o=n[1];cr(n,r.rotation),rr.beginPath(),rr.moveTo(e,o+2),rr.lineTo(e-4,o),rr.lineTo(e,o-2),rr.lineTo(e+4,o),rr.lineTo(e,o+2),rr.stroke()})),vr=ar(lt,fr(6)),hr=ar(ft,fr(5)),gr=("position",function(t){return t.position});const yr=function(t){return ir(k(gr,er(t)))};var mr=yr((function(t){return ur([t,{radius:1}])})),br=yr((function(t){or((function(){return t}),(function(){return"X"}))})),Er=function(t,n){return n.map((function(n){return n(t)}))},Or=[lr,pr,dr,sr,vr,hr].reduce(k);const Mr=function(t,n,r,e,o){return function(i){return function(u){var a=u.filter(r);if(e(i,a.length)){var c=t(),f=n(i,c);return u.concat(o(c,f))}return u}}};function Nr(){return C.add(C.fromDegreesAndMagnitude(St(360),400),C.CENTER_SCREEN)}var Ir=function(t){return function(n,r){void 0===n&&(n=1);var e=C.add(C.fromDegreesAndMagnitude(St(360),100),C.CENTER_SCREEN),o=C.normalize(C.subtract(e,r));return C.scale(o,Math.max(.5,Math.random()*n*t))}};const Cr=Mr(Nr,Ir(1/36),et,(function(t,n){return n-1<.05555555555555555*(t+1)}),(function(t,n){return vn(vn({},gn),{position:[t],velocity:n})}));var Ar=function(){return Ar=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},Ar.apply(this,arguments)},Sr={position:[],velocity:[0,0],hasCollidedWith:[],isCollidableWith:nt,type:4,delete:!1,radius:8,rotation:0,angularVelocity:0};const wr=Mr(Nr,Ir(1/64),lt,(function(t,n){return n<1}),Gt((function(t,n){return function(t,n,r,e){return void 0===r&&(r=0),void 0===e&&(e=0),Ar(Ar({},Sr),{position:[t],velocity:n,rotation:r,angularVelocity:e})}(t,n,St(360),wt(-2,2,1.5,-1.5))})));var jr=function(t){var n={state:t};return function(t){return void 0!==t&&(n.state=t(n.state)),n.state}},_r=function(){return _r=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},_r.apply(this,arguments)},Pr=[et,at,lt].reduce(gt);var Dr=function(){return Dr=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},Dr.apply(this,arguments)},Tr={ttl:200,position:[C.ZERO],velocity:C.ZERO,radius:1,rotation:0,hasCollidedWith:[],isCollidableWith:function(){return!1},owner:3,angularVelocity:0,type:2,delete:!1},Rr=x(z((function(t){return t.filter(it).length<3}),(function(t){return t.filter(rt).length>0})),k(Dt,(function(t){var n=An(t);return t.concat(function(t){return n={location:C.add(T.real(t.position),C.fromDegreesAndMagnitude(t.rotation,10)),rotation:t.rotation,owner:1,isCollidableWith:[et,ft,lt].reduce(gt),inheritedVelocity:t.velocity},r=C.fromDegreesAndMagnitude(n.rotation,4),Dr(Dr({},Tr),{position:T.fromVector(n.location),velocity:C.add(r,n.inheritedVelocity),ttl:200,rotation:n.rotation,isCollidableWith:n.isCollidableWith,owner:n.owner});var n,r}(n))})));const Wr=function(t,n){return function(){return t(n)}};var Lr=function(){return Lr=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},Lr.apply(this,arguments)},Gr={count:0,position:[],velocity:[0,0],rotation:0,angularVelocity:0,type:7,delete:!1,radius:4,hasCollidedWith:[],isCollidableWith:gt(lt,nt),durability:1},Vr=function(t){return function(n){return Ft.play(),t(n)}},kr=Vr((function(t){return _r(_r({},t),{acceleration:.02})})),Br={},Fr={},xr={isButtonPushed:function(t){return!(!Br[t]||Fr[t]||(Fr[t]=!0,0))},isButtonHeld:function(t){return Br[t]}};addEventListener("keypress",(function(t){Br[t.key]=!0})),addEventListener("keyup",(function(t){Br[t.key]=!1,Fr[t.key]=!1}));const zr=xr;var Hr,qr,Zr,Xr,Yr,Ur={timer:jr(0),paused:jr(!1),objectList:jr(new Array),particleList:jr(new Array),score:jr(0),ore:jr(0)},Jr=B((Hr=Ur).paused,(function(){return or((function(){return C.CENTER_SCREEN}),(function(){return"PAUSED"}),{size:"2em"})}),(function(){var t;Or(Hr.objectList()),(t=Hr.timer(),function(n){return[P(Er,t),R(x(tt(0),ir(mr))),R(x(tt(1),ir(br)))].reduce(k)(n)})(Hr.particleList()),or((function(){return[C.CENTER_SCREEN[0],20]}),(function(){return"SCORE: "+Hr.score()})),or((function(){return[C.CENTER_SCREEN[0],40]}),(function(){return"CARGO: "+Hr.ore()}))})),Kr=function(t){var n,r=[pn(4),pn(-4)],e=r[1],o=Vr(r[0]),i=Vr(e),u={fire:Wr(t.objectList,Rr),rotateClockwise:Wr(t.objectList,o),rotateCounterclockwise:Wr(t.objectList,i),accelerate:Wr(t.objectList,R(x(rt,kr))),reset:function(){!function(t){t.timer((function(t){return 0})),t.paused((function(t){return!1})),t.objectList((function(t){return[_r(_r({},Kt(C.CENTER_SCREEN,[0,0],6,1)),{rotation:0,acceleration:0,hasCollidedWith:[],isCollidableWith:Pr,angularVelocity:0}),{radius:100,position:[C.CENTER_SCREEN],type:6,isCollidableWith:function(t){return!1},hasCollidedWith:[]}]})),t.particleList((function(t){return[]})),t.score((function(t){return 0})),t.ore((function(t){return 0}))}(t),xt()},pause:Wr(t.paused,k(Lt,(function(t){return!t}))),jettison:Wr(t.objectList,(n=t.ore,function(t){var r=n();if(r<1)return t;var e,o,i=An(t);return i?(n((function(t){return 0})),kt(),t.concat((e=T.real(i.position),o=i.velocity,function(t,n,r,e,o){return void 0===e&&(e=0),void 0===o&&(o=0),Lr(Lr({},Gr),{position:[t],velocity:n,count:r,rotation:e,angularVelocity:o})}(e,o,r,St(360),wt(-2,2,2.5,-2.5))))):t}))};return u}(Ur),Qr=(qr=Ur.objectList,Zr=Ur.timer,[(Xr=qr,Yr=Zr,[xn,zn,Hn,qn,Zn,Xn,Un,Yn,Jn,Kn].map((function(t){return t(Xr,Yr)})).reduce(k)),function(t){return function(n){return n.filter(function(t){return function(n){return n(t())[0]!==Number.POSITIVE_INFINITY}}(t))}}(Zr),Qn].reduce(k)),$r=function(t){return[Sn(t)].reduce(k)}(Ur.objectList),te=function(t){return[tr(t)].reduce(k)}(Ur.objectList);Kr.reset();var ne=0,re=[0];setInterval((function(){!function(){var t=C.GAME_DIMENSIONS,n=t[0],r=t[1];rr.fillRect(-10,-10,n+15,r+15)}(),Jr(),or((function(){return[40,10]}),(function(){return"FPS: "+Math.round(1e3/((t=re).reduce((function(t,n){return t+n}))/t.length));var t}))}),1e3/60),setInterval((function(){zr.isButtonPushed("p")&&Kr.pause(),zr.isButtonPushed("o")&&Kr.reset(),Ur.paused()||(zr.isButtonHeld("W")||Ft.pause(),zr.isButtonHeld("a")||Ft.pause(),zr.isButtonHeld("d")||Ft.pause(),zr.isButtonHeld("w")&&Kr.accelerate(),zr.isButtonHeld("a")&&Kr.rotateCounterclockwise(),zr.isButtonHeld("d")&&Kr.rotateClockwise(),zr.isButtonPushed("Enter")&&Kr.fire(),zr.isButtonPushed("c")&&Kr.jettison(),Ur.particleList(Qr),Ur.objectList(Cn),Ur.score(te),Ur.ore($r),Ur.timer()%60==0&&Ur.objectList(Cr(Ur.score())),Ur.timer()%3600==600&&Ur.objectList(wr(Ur.score())),Ur.timer((function(t){return++t})),re.unshift(Date.now()-ne),re=_n(30)(re),ne=Date.now())}),1e3/60)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,