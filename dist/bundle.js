(()=>{"use strict";var t=[0,1],n=t[0],r=t[1],e=[0,1],o=e[0],i=e[1];const u=function(t,n){return[t[o]-n[o],t[i]-n[i]]},a=function(t){var n=t[0],r=t[1];return n*n+r*r},c=function(t,n){return a(u(t,n))};var f=[0,1],l=f[0],s=f[1];const p=function(t){return Math.sqrt(a(t))};var d=[0,1],v=d[0],h=d[1];const g=function(t){return[t[v]/p(t),t[h]/p(t)]};var y=[0,1],m=y[0],b=y[1];const E=function(t){return Math.atan2(g(t)[b],g(t)[m])},O=function(t,n){return(t%n+n)%n};var M=[0,1],N=M[0],I=M[1];const C={fromComponents:function(t,n){return[t,n]},new:function(t,n){return[t,n]},fromDegreesAndMagnitude:function(t,n){var r=2*Math.PI/360*t;return[Math.cos(r)*n,Math.sin(r)*n]},add:function(t,e){return[t[n]+e[n],t[r]+e[r]]},subtract:u,scale:function(t){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];var e=n.reduce((function(t,n){return t*n}));return[t[N]*e,t[I]*e]},degrees:function(t){var n=E(t);return O(360*n/2/Math.PI,360)},radians:E,normalize:g,magnitude:p,squaredMagnitude:a,distanceSquared:c,distance:function(t,n){return Math.sqrt(c(t,n))},dotProduct:function(t,n){return t[l]*n[l]+t[s]*n[s]},UP:[0,-1],DOWN:[0,1],LEFT:[-1,0],RIGHT:[1,0],ZERO:[0,0],INF:[Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY],GAME_DIMENSIONS:[500,500],CENTER_SCREEN:[250,250]},A=function(t,n){return[O(n[0],t[0]),O(n[1],t[1])]};function w(t,n){return function(t,n,r){if(r||2===arguments.length)for(var e,o=0,i=n.length;o<i;o++)!e&&o in n||(e||(e=Array.prototype.slice.call(n,0,o)),e[o]=n[o]);return t.concat(e||Array.prototype.slice.call(n))}([],t,!0).map((function(t){return C.add(t,n)}))}const S=function(t){return function(n){return n?n[t]:[0,0]}};var j,_=function(t,n,r){if(r||2===arguments.length)for(var e,o=0,i=n.length;o<i;o++)!e&&o in n||(e||(e=Array.prototype.slice.call(n,0,o)),e[o]=n[o]);return t.concat(e||Array.prototype.slice.call(n))},P=function(t){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];return function(){for(var r=[],e=0;e<arguments.length;e++)r[e]=arguments[e];return t.apply(void 0,_(_([],n,!1),r,!1))}};!function(t){t[t.real=0]="real",t[t.topLeft=1]="topLeft",t[t.top=2]="top",t[t.topRight=3]="topRight",t[t.left=4]="left",t[t.right=5]="right",t[t.bottomLeft=6]="bottomLeft",t[t.bottom=7]="bottom",t[t.bottomRight=8]="bottomRight"}(j||(j={}));var D=[C.fromComponents(0,0),C.fromComponents(-C.GAME_DIMENSIONS[0],-C.GAME_DIMENSIONS[1]),C.fromComponents(0,-C.GAME_DIMENSIONS[1]),C.fromComponents(C.GAME_DIMENSIONS[0],-C.GAME_DIMENSIONS[1]),C.fromComponents(-C.GAME_DIMENSIONS[0],0),C.fromComponents(C.GAME_DIMENSIONS[0],0),C.fromComponents(-C.GAME_DIMENSIONS[0],C.GAME_DIMENSIONS[1]),C.fromComponents(0,C.GAME_DIMENSIONS[1]),C.fromComponents(C.GAME_DIMENSIONS[0],C.GAME_DIMENSIONS[1])];const T={fromVector:P(w,D),fromComponents:function(t,n){return function(t,n,r){return w(t,C.fromComponents(n,r))}(D,t,n)},addVector:w,real:S(j.real),closestTo:function(t,n){var r=t.map((function(t){return C.distanceSquared(t,n)})).reduce((function(t,n,r){return n<t[0]?[n,r]:t}),[Number.MAX_SAFE_INTEGER,Number.MAX_SAFE_INTEGER])[1];return t[r]},constrain:function(t,n){return function(r){var e=S(n)(r),o=A(C.GAME_DIMENSIONS,e);return w(t,o)}}(D,j.real)},R=function(t){return function(n){return n.map(t)}};var W=function(){return W=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},W.apply(this,arguments)},L=function(t,n,r){if(r||2===arguments.length)for(var e,o=0,i=n.length;o<i;o++)!e&&o in n||(e||(e=Array.prototype.slice.call(n,0,o)),e[o]=n[o]);return t.concat(e||Array.prototype.slice.call(n))};const G={reset:R((function(t){return W(W({},t),{hasCollidedWith:[]})})),checkAgainstMask:(V=function(t,n){return t.isCollidableWith(n)?function(t,n){if(t===n)return t;var r,e=T.real(t.position);r=t.position.length===n.position.length?T.closestTo(n.position,e):T.real(n.position);var o=C.distanceSquared(e,r),i=t.radius+n.radius;return o<=i*i?W(W({},t),{hasCollidedWith:L(L([],t.hasCollidedWith,!0),[n.type],!1)}):t}(t,n):t},function(t){return t.map((function(n){return t.reduce(V,n)}))})};var V;const k=function(t,n){return function(r){return n(t(r))}},B=function(t,n,r){return function(e){return t(e)?n(e):r(e)}},F=function(t){return t};var x=function(t,n){return B(t,n,F)};const z=function(t,n){return function(r){return t(r)&&n(r)}};var H=function(t){return t.hasCollidedWith.length>0},q=function(t){return function(n){return n.hasCollidedWith.filter((function(n){return n===t})).length>0}},Z=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n){return t.reduce((function(t,r){return t&&r in n}),!0)}},X=Z("velocity","position"),Y=Z("durability"),U=Z("rotation"),J=Z("ttl"),K=Z("acceleration"),Q=z(Z("position"),(function(t){return t.position.length>1})),$=function(t){return t.ttl<1},tt=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n){return t.reduce((function(t,r){return t||n.type===r}),!1)}},nt=tt(2),rt=tt(1),et=tt(0),ot=(1,function(t){return 1===t.owner}),it=z(nt,ot),ut=z((function(t){return(null==t?void 0:t.durability)<1}),et),at=function(t){return 5===t.type},ct=tt(6),ft=tt(7),lt=tt(4),st=[lt,H,function(t){return t.delete}].reduce(z),pt=function(){return pt=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},pt.apply(this,arguments)};const dt=R(x(K,(function(t){return pt(pt({},t),{velocity:C.add(t.velocity,C.fromDegreesAndMagnitude(t.rotation,t.acceleration))})})));var vt=function(){return vt=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},vt.apply(this,arguments)};const ht=R(x(Q,(function(t){return vt(vt({},t),{position:T.constrain(t.position)})}))),gt=function(t,n){return function(r){return t(r)||n(r)}};var yt=function(){return yt=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},yt.apply(this,arguments)};const mt=function(t){return yt(yt({},t),{delete:!0})},bt=R(x(z(H,[nt,lt].reduce(gt)),mt)),Et=R(x((function(t){return C.magnitude(C.subtract(T.real(t.position),C.CENTER_SCREEN))>500}),mt));var Ot=[nt].reduce(gt);const Mt=R(x(z(Ot,$),mt));var Nt,It=function(t,n){return(Math.random()-.5)*n+t},Ct=function(t,n){return void 0===n&&(n=0),n+Math.random()*(t-n)},At=function(t,n){return void 0===n&&(n=0),Math.floor(Ct(t+1,n))},wt=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return t[At(t.length-1)]},St="/AstroMine/src/sfx/",jt=function(t){return function(n){return new Audio(St+t).play(),n}},_t=function(t){return function(n){return new Audio(St+wt.apply(void 0,t)).play(),n}},Pt=_t(["shoot.wav","shoot2.wav","shoot3.wav"]),Dt=_t(["asteroid_hit.wav","asteroid_hit2.wav","asteroid_hit3.wav"]),Tt=_t(["asteroid_shatter.wav","asteroid_shatter2.wav","asteroid_shatter3.wav"]),Rt=jt("player_kill.wav"),Wt=jt("pause.wav"),Lt=("drone_spawn.wav",function(t){return function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];return jt("drone_spawn.wav")(),t.apply(void 0,n)}}),Gt=jt("ore_pickup.wav"),Vt=jt("jettison.wav"),kt=jt("drone_pickup.wav"),Bt=((Nt=new Audio(St+"thrust.wav")).loop=!0,{play:function(){return Nt.play()},pause:function(){return Nt.pause()}}),Ft=jt("restart.wav");const xt=function(t,n){for(var r=[],e=2;e<arguments.length;e++)r[e-2]=arguments[e];return R(x(z(tt(n),r.map(q).reduce(gt)),t))},zt=xt(k(kt,mt),5,4),Ht=xt(k(kt,mt),7,4),qt=xt(k(Gt,mt),5,1),Zt=xt(k(Rt,mt),1,0,4);var Xt=function(){return Xt=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},Xt.apply(this,arguments)};const Yt=x(Q,(function(t){return Xt(Xt({},t),{position:[T.real(t.position)]})})),Ut=R(x([at,$,Q].reduce(z),Yt));function Jt(t,n,r,e){return void 0===e&&(e=3),{position:T.fromVector(t),radius:r,velocity:n,type:e,delete:!1}}var Kt=function(){return Kt=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},Kt.apply(this,arguments)},Qt=function(t,n){return function(t,n,r,e){return void 0===r&&(r=0),void 0===e&&(e=0),Kt(Kt({},Jt(t,n,3,5)),{hasCollidedWith:[],isCollidableWith:gt(rt,lt),rotation:r,angularVelocity:e,ttl:1200})}(t,n,At(360),wt(-2,2))};const $t=k(R(x(z(ft,q(2)),(function(t){var n=new Array(t.count).fill(1).map((function(n){return function(t){return Qt(T.real(t.position),[C.fromDegreesAndMagnitude(At(360),C.magnitude(t.velocity)/3+.1),t.velocity].reduce(C.add))}(t)}));return n}))),(function(t){return t.flat()}));var tn=function(){return tn=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},tn.apply(this,arguments)};const nn=R(x(z(q(6),k(Q,(function(t){return!t}))),(function(t){return tn(tn({},t),{position:T.fromVector(T.real(t.position))})})));var rn=function(){return rn=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},rn.apply(this,arguments)};const en=R(x(X,(function(t){return rn(rn({},t),{position:T.addVector(t.position,t.velocity)})})));var on=function(){return on=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},on.apply(this,arguments)},un=P((function(t,n){return on(on({},n),{acceleration:t})}),0);const an=R(x(K,un));var cn=function(){return cn=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},cn.apply(this,arguments)};const fn=R(x(rt,(function(t){return cn(cn({},t),{angularVelocity:0})})));var ln=function(){return ln=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},ln.apply(this,arguments)},sn=function(t){return R(x(rt,(n=t,function(t){return ln(ln({},t),{angularVelocity:n})})));var n};const pn=R(x(U,(function(t){return ln(ln({},t),{rotation:t.rotation+t.angularVelocity})})));var dn=function(){return dn=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},dn.apply(this,arguments)},vn=[15,25],hn={hasCollidedWith:[],durability:3,size:2,isCollidableWith:gt(it,ct),radius:40,type:0,delete:!1},gn=k(Tt,(function(t){var n,r=P((n=t.size-1,function(t,r,e,o){return void 0===e&&(e=3),void 0===o&&(o=vn),dn(dn({},Jt(t,r,o[n],0)),{hasCollidedWith:[],durability:e,size:n,isCollidableWith:it})}),T.real(t.position));return 0===t.size?[dn(dn({},t),{delete:!0}),Qt(T.real(t.position),t.velocity)]:function(t,n,r,e){void 0===n&&(n=30),void 0===r&&(r=5),void 0===e&&(e=1.1);var o=C.degrees(t.velocity),i=[o+n+r,o-n-r],u=C.magnitude(t.velocity);return i.map((function(t){return function(t,n){return C.fromDegreesAndMagnitude(It(t,n),1)}(t,2*n)})).map((function(t){return C.scale(t,u,e)}))}(t).map((function(t){return r(t)})).concat(dn(dn({},t),{delete:!0}))}));const yn=k(R(x(ut,gn)),(function(t){return t.flat()}));var mn=function(){return mn=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},mn.apply(this,arguments)};const bn=R(x(J,(function(t){return mn(mn({},t),{ttl:t.ttl-1})})));var En=function(){return En=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},En.apply(this,arguments)};const On=x(Y,(function(t){return En(En({},t),{durability:t.durability-1})}));var Mn=k(Dt,On);const Nn=R(x(q(2),Mn));var In=[function(t){return t.filter((function(t){return!t.delete}))},G.reset,en,ht,pn,fn,bn,G.checkAgainstMask,Nn,bt,Zt,yn,dt,Et,Ht,Mt,qt,zt,Ut,$t,an,nn].reduce(k);const Cn=function(t){return t.filter((function(t){return 1===t.type}))[0]};var An=function(t){return function(n){var r=Cn(t());return r?n+(5,function(t){return t.hasCollidedWith.filter((function(t){return 5===t})).length})(r):n}},wn=function(t,n,r,e,o){var i=o-e;return[t,C.scale(n,i),C.scale(r(i),.5,i*i)].reduce(C.add)},Sn=function(t){return{position:C.ZERO,type:0}};const jn=function(t){return function(n){for(var r=Array.from(n);r.length>t;)r.pop();return r}};var _n,Pn,Dn=function(t){var n=t.offset,r=void 0===n?function(){return Ct(2*Math.PI)}:n,e=t.amplitude,o=void 0===e?5:e,i=t.period,u=void 0===i?10:i,a=t.yAxis;return function(){var t=r();return function(n){return C.fromDegreesAndMagnitude(a,Math.sin(n/u+t)*o/(n*n))}}},Tn=(_n=C.ZERO,function(){return function(t){return _n}}),Rn=function(t,n){return n.concat(t)},Wn=(Pn=C.GAME_DIMENSIONS,function(t,n,r,e,o,i){return void 0===e&&(e=Number.MAX_SAFE_INTEGER),function(u){return u>=e+t?{position:C.INF,type:i}:{position:A(Pn,wn(n,r,o,t,u)),type:i}}}),Ln=function(t){var n=new Array(t.number).fill(Sn);return n.map((function(n){return Wn(t.timer(),t.location,C.fromDegreesAndMagnitude(It(t.angle,t.spread),t.speed),t.lifetime,t.acceleration(),t.type)}))},Gn=function(t,n,r){return{get location(){return[T.real(t.position),C.fromDegreesAndMagnitude(t.rotation,-5),C.fromDegreesAndMagnitude(t.rotation+90,n)].reduce(C.add)},get speed(){return 1.5*C.magnitude(t.velocity)},get angle(){return t.rotation+180},spread:0,get number(){return At(1,0)},get lifetime(){return At(15,5)},timer:r,acceleration:Dn({yAxis:t.rotation+90}),type:0}},Vn=function(t){return function(n){return Ln(Gn(n,-5,t))}},kn=function(t){return function(n){return Ln(Gn(n,5,t))}},Bn=function(t,n){return function(r,e){return function(o){var i=r().filter(n).map(t(e)).reduce(Rn,[]);return Rn(o,i)}}},Fn=Bn((function(t){return function(n){return Ln({get location(){return T.real(n.position)},get speed(){return Ct(3,1)},angle:0,spread:360,get number(){return 2*n.radius},get lifetime(){return At(120,60)},timer:t,acceleration:Tn,type:0})}}),(function(t){return 0===t.type&&t.delete})),xn=Bn((function(t){return function(n){var r=n.rotation+90;return Ln({get location(){return T.real(n.position)},get speed(){return.2*C.magnitude(n.velocity)*Ct(1)},get angle(){return n.rotation+180},spread:15,get number(){return At(1,0)},get lifetime(){return At(45,15)},timer:t,acceleration:Dn({yAxis:r}),type:0})}}),nt),zn=Bn((function(t){return function(n){return Ln({get location(){return T.real(n.position)},get speed(){return Ct(1)},get angle(){return n.rotation+180},spread:110,get number(){return At(60,30)},get lifetime(){return At(60)},timer:t,acceleration:function(){return function(t){return C.fromDegreesAndMagnitude(O(20*t,360)+It(0,360),10/(t*t))}},type:0})}}),z(nt,H)),Hn=Bn((function(t){return function(n){return[kn(t)(n),Vn(t)(n)].flat()}}),z(rt,(function(t){return t.acceleration>0}))),qn=Bn((function(t){return function(n){return Ln({get location(){return T.real(n.position)},get speed(){return.15*C.magnitude(n.velocity)*Ct(1)},get angle(){return n.rotation},spread:60,get number(){return At(10,5)},get lifetime(){return At(100)},timer:t,acceleration:function(){return function(t){return C.fromDegreesAndMagnitude(O(10*t,360)+It(0,360),5/(t*t))}},type:0})}}),(function(t){return nt(t)&&t.hasCollidedWith.length<1&&t.delete})),Zn=Bn((function(t){return function(n){return Ln({get location(){return T.real(n.position)},get speed(){return Ct(.5,.15)},angle:0,spread:360,get number(){return At(40,30)},get lifetime(){return At(210,180)},timer:t,acceleration:Tn,type:0})}}),z(rt,(function(t){return t.delete}))),Xn=Bn(kn,z(rt,(function(t){return t.angularVelocity<0}))),Yn=Bn(Vn,z(rt,(function(t){return t.angularVelocity>0}))),Un=Bn((function(t){return function(n){return Ln({get location(){return T.real(n.position)},get speed(){return Ct(.5)},angle:0,spread:360,number:10,get lifetime(){return At(360,180)},timer:t,acceleration:Tn,type:0})}}),st),Jn=Bn((function(t){return function(n){return Ln({get location(){return T.real(n.position)},speed:0,angle:0,spread:0,number:1,lifetime:600,timer:t,acceleration:Tn,type:1})}}),st),Kn=jn(1e3),Qn=function(t,n){return t+n},$n=function(t){return function(n){var r=t().filter(ft),e=t().filter(z(at,q(4))),o=function(t){return t.length<1?0:t.filter(q(4)).map((function(t){return t.count})).reduce(Qn,0)}(r),i=function(t){return t.length||0}(e);return n+o+i}},tr=document.getElementById("canvas");tr.width=C.GAME_DIMENSIONS[0],tr.height=C.GAME_DIMENSIONS[1];var nr=tr.getContext("2d");function rr(t){return function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];nr.save(),t.apply(void 0,n),nr.restore()}}nr.translate(.5,.5),nr.imageSmoothingEnabled=!1,nr.fillColor="black",nr.strokeStyle="rgb(0,255,0)";const er=rr((function(t,n,r){var e=void 0===r?{}:r,o=e.color,i=void 0===o?"rgb(0,255,0)":o,u=e.size,a=void 0===u?"1em":u;nr.textAlign="center",nr.textBaseline="top",nr.font=a+" sans-serif",nr.fillStyle=i;var c=t(),f=c[0],l=c[1];nr.fillText(n(),f,l)})),or=function(t){return function(n){return t(n),n}};var ir=function(t){var n=t[0],r=n[0],e=n[1],o=t[1];nr.moveTo(r,e),nr.beginPath(),nr.arc(r,e,o.radius,0,2*Math.PI),nr.stroke()};const ur=function(t,n){return R(x(t,(r=rr(n),function(t){return t.position.forEach((function(n){return r([n,t])})),t})));var r};var ar=function(t,n){var r=t[0],e=t[1];nr.translate(r,e),nr.rotate(2*Math.PI/360*n),nr.translate(-r,-e)};const cr=function(t){return function(n){var r=n[0],e=n[1],o=2*Math.PI/t,i=new Array(t).fill(1).map((function(t,n){return(n+1)*o})).map((function(t){return[Math.cos(t),Math.sin(t)]})).map((function(t){return C.scale(t,e.radius)})).map((function(t){return C.add(t,r)}));nr.beginPath(),ar(r,e.rotation),nr.moveTo.apply(nr,i[0]),i.forEach((function(t){return nr.lineTo.apply(nr,t)})),nr.lineTo.apply(nr,i[0]),nr.stroke()}};var fr=ur(et,ir),lr=ur(at,cr(4)),sr=ur(rt,(function(t){var n=t[0],r=t[1],e=n[0],o=n[1];ar(n,r.rotation),nr.beginPath(),nr.moveTo(e-4,o+7),nr.lineTo(e-4,o-7),nr.lineTo(e+10,o),nr.lineTo(e-4,o+7),nr.stroke()})),pr=ur(nt,(function(t){var n=t[0],r=t[1],e=n[0],o=n[1];ar(n,r.rotation),nr.beginPath(),nr.moveTo(e,o+2),nr.lineTo(e-4,o),nr.lineTo(e,o-2),nr.lineTo(e+4,o),nr.lineTo(e,o+2),nr.stroke()})),dr=ur(lt,cr(6)),vr=ur(ft,cr(5)),hr=("position",function(t){return t.position});const gr=function(t){return or(k(hr,rr(t)))};var yr=gr((function(t){return ir([t,{radius:1}])})),mr=gr((function(t){er((function(){return t}),(function(){return"X"}))})),br=function(t,n){return n.map((function(n){return n(t)}))},Er=[fr,sr,pr,lr,dr,vr].reduce(k);const Or=function(t,n,r,e,o){return function(i){return function(u){var a=u.filter(r);if(e(i,a.length)){var c=t(),f=n(i,c);return u.concat(o(c,f))}return u}}};function Mr(){return C.add(C.fromDegreesAndMagnitude(At(360),400),C.CENTER_SCREEN)}var Nr=function(t){return function(n,r){void 0===n&&(n=1);var e=C.add(C.fromDegreesAndMagnitude(At(360),100),C.CENTER_SCREEN),o=C.normalize(C.subtract(e,r));return C.scale(o,Math.max(.5,Math.random()*n*t))}};const Ir=Or(Mr,Nr(1/36),et,(function(t,n){return n-1<.05555555555555555*(t+1)}),(function(t,n){return dn(dn({},hn),{position:[t],velocity:n})}));var Cr=function(){return Cr=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},Cr.apply(this,arguments)},Ar={position:[],velocity:[0,0],hasCollidedWith:[],isCollidableWith:nt,type:4,delete:!1,radius:8,rotation:0,angularVelocity:0};const wr=Or(Mr,Nr(1/64),lt,(function(t,n){return n<1}),Lt((function(t,n){return function(t,n,r,e){return void 0===r&&(r=0),void 0===e&&(e=0),Cr(Cr({},Ar),{position:[t],velocity:n,rotation:r,angularVelocity:e})}(t,n,At(360),wt(-2,2,1.5,-1.5))})));var Sr=function(t){var n={state:t};return function(t){return void 0!==t&&(n.state=t(n.state)),n.state}},jr=function(){return jr=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},jr.apply(this,arguments)},_r=[et,at,lt].reduce(gt);var Pr=function(){return Pr=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},Pr.apply(this,arguments)},Dr={ttl:200,position:[C.ZERO],velocity:C.ZERO,radius:1,rotation:0,hasCollidedWith:[],isCollidableWith:function(){return!1},owner:3,angularVelocity:0,type:2,delete:!1},Tr=x(z((function(t){return t.filter(it).length<3}),(function(t){return t.filter(rt).length>0})),k(Pt,(function(t){var n=Cn(t);return t.concat(function(t){return n={location:C.add(T.real(t.position),C.fromDegreesAndMagnitude(t.rotation,10)),rotation:t.rotation,owner:1,isCollidableWith:[et,ft,lt].reduce(gt),inheritedVelocity:t.velocity},r=C.fromDegreesAndMagnitude(n.rotation,4),Pr(Pr({},Dr),{position:T.fromVector(n.location),velocity:C.add(r,n.inheritedVelocity),ttl:200,rotation:n.rotation,isCollidableWith:n.isCollidableWith,owner:n.owner});var n,r}(n))})));const Rr=function(t,n){return function(){return t(n)}};var Wr=function(){return Wr=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},Wr.apply(this,arguments)},Lr={count:0,position:[],velocity:[0,0],rotation:0,angularVelocity:0,type:7,delete:!1,radius:4,hasCollidedWith:[],isCollidableWith:gt(lt,nt),durability:1},Gr=function(t){return function(n){return Bt.play(),t(n)}},Vr=Gr((function(t){return jr(jr({},t),{acceleration:.02})})),kr={},Br={},Fr={isButtonPushed:function(t){return!(!kr[t]||Br[t]||(Br[t]=!0,0))},isButtonHeld:function(t){return kr[t]}};addEventListener("keypress",(function(t){kr[t.key]=!0})),addEventListener("keyup",(function(t){kr[t.key]=!1,Br[t.key]=!1}));const xr=Fr;var zr,Hr,qr,Zr,Xr,Yr={timer:Sr(0),paused:Sr(!1),objectList:Sr(new Array),particleList:Sr(new Array),score:Sr(0),ore:Sr(0)},Ur=B((zr=Yr).paused,(function(){return er((function(){return C.CENTER_SCREEN}),(function(){return"PAUSED"}),{size:"2em"})}),(function(){var t;Er(zr.objectList()),(t=zr.timer(),function(n){return[P(br,t),R(x(tt(0),or(yr))),R(x(tt(1),or(mr)))].reduce(k)(n)})(zr.particleList()),er((function(){return[C.CENTER_SCREEN[0],20]}),(function(){return"SCORE: "+zr.score()})),er((function(){return[C.CENTER_SCREEN[0],40]}),(function(){return"CARGO: "+zr.ore()}))})),Jr=function(t){var n,r=[sn(4),sn(-4)],e=r[1],o=Gr(r[0]),i=Gr(e),u={fire:Rr(t.objectList,Tr),rotateClockwise:Rr(t.objectList,o),rotateCounterclockwise:Rr(t.objectList,i),accelerate:Rr(t.objectList,R(x(rt,Vr))),reset:function(){!function(t){t.timer((function(t){return 0})),t.paused((function(t){return!1})),t.objectList((function(t){return[jr(jr({},Jt(C.CENTER_SCREEN,[0,0],6,1)),{rotation:0,acceleration:0,hasCollidedWith:[],isCollidableWith:_r,angularVelocity:0}),{radius:100,position:[C.CENTER_SCREEN],type:6,isCollidableWith:function(t){return!1},hasCollidedWith:[]}]})),t.particleList((function(t){return[]})),t.score((function(t){return 0})),t.ore((function(t){return 0}))}(t),Ft()},pause:Rr(t.paused,k(Wt,(function(t){return!t}))),jettison:Rr(t.objectList,(n=t.ore,function(t){var r=n();if(r<1)return t;var e,o,i=Cn(t);return i?(n((function(t){return 0})),Vt(),t.concat((e=T.real(i.position),o=i.velocity,function(t,n,r,e,o){return void 0===e&&(e=0),void 0===o&&(o=0),Wr(Wr({},Lr),{position:[t],velocity:n,count:r,rotation:e,angularVelocity:o})}(e,o,r,At(360),wt(-2,2,2.5,-2.5))))):t}))};return u}(Yr),Kr=(Hr=Yr.objectList,qr=Yr.timer,[(Zr=Hr,Xr=qr,[Fn,xn,zn,Hn,qn,Zn,Yn,Xn,Un,Jn].map((function(t){return t(Zr,Xr)})).reduce(k)),function(t){return function(n){return n.filter(function(t){return function(n){return n(t())[0]!==Number.POSITIVE_INFINITY}}(t))}}(qr),Kn].reduce(k)),Qr=function(t){return[An(t)].reduce(k)}(Yr.objectList),$r=function(t){return[$n(t)].reduce(k)}(Yr.objectList);Jr.reset();var te=0,ne=[0];setInterval((function(){!function(){var t=C.GAME_DIMENSIONS,n=t[0],r=t[1];nr.fillRect(-10,-10,n+15,r+15)}(),Ur(),er((function(){return[40,10]}),(function(){return"FPS: "+Math.round(1e3/((t=ne).reduce((function(t,n){return t+n}))/t.length));var t}))}),1e3/60),setInterval((function(){xr.isButtonPushed("p")&&Jr.pause(),xr.isButtonPushed("o")&&Jr.reset(),Yr.paused()||(xr.isButtonHeld("W")||Bt.pause(),xr.isButtonHeld("a")||Bt.pause(),xr.isButtonHeld("d")||Bt.pause(),xr.isButtonHeld("w")&&Jr.accelerate(),xr.isButtonHeld("a")&&Jr.rotateCounterclockwise(),xr.isButtonHeld("d")&&Jr.rotateClockwise(),xr.isButtonPushed("Enter")&&Jr.fire(),xr.isButtonPushed("c")&&Jr.jettison(),Yr.particleList(Kr),Yr.objectList(In),Yr.score($r),Yr.ore(Qr),Yr.timer()%60==0&&Yr.objectList(Ir(Yr.score())),Yr.timer()%3600==600&&Yr.objectList(wr(Yr.score())),Yr.timer((function(t){return++t})),ne.unshift(Date.now()-te),ne=jn(30)(ne),te=Date.now())}),1e3/60)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,